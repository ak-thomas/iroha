defaults: &defaults
  working_directory: /opt/iroha
  environment:
    IROHA_HOME: /opt/iroha
    IROHA_BUILD: /opt/iroha/build


version: 2

jobs:
  build:
    <<: *defaults
    docker:
      - image: hyperledger/iroha-docker-develop
      - image: postgres:9.5
      - image: redis:3.2.8
    steps:
      - checkout
      - restore_cache:
          keys:
            - build-cache-{{ .Branch }}-
            - build-cache-
          paths:
            - ~/.ccache

      # build and cache build results
      - run:
          name: ccache setup
          command: |
            ccache -F 0
            ccache -M 0

      # cmake and make
      - run:
          name: cmake
          command: cmake -DCOVERAGE=ON -H$IROHA_HOME -B$IROHA_BUILD
      - run:
          name: make
          command: |
            cmake --build $IROHA_BUILD -- -j4
      # save cache
      - run:
          name: ccache teardown
          command: |
            ccache --cleanup
            ccache --show-stats
      - save_cache:
          key: build-cache-{{ .Branch }}-{{ epoch }}
          paths:
            - ~/.ccache

      - run: ccache --show-stats

      # test and coverage info
      - run:
          name: unit tests, generate xunit-*.xml
          command: cmake --build $IROHA_BUILD --target test
      - run:
          name: coverage info
          command: cmake --build $IROHA_BUILD --target gcovr

      # analysis
      - run:
          name: cppcheck
          command: cmake --build $IROHA_BUILD --target cppcheck

      # persist reports
      - persist_to_workspace:
          root: /opt/iroha/build
          paths:
            - compile_commands.json
            - reports



  # used to push info about issues to github
  sonar-pr:
    <<: *defaults
    docker:
      - image: hyperledger/iroha-docker-develop
    steps:
      - checkout
      - restore_cache:
          keys:
            - sonar-
      - attach_workspace:
          at: /opt/iroha/build
      - run:
          name: codecov.io
          command: bash <(curl -s https://codecov.io/bash) -f $IROHA_BUILD/reports/gcovr.xml || echo "Codecov did not collect coverage reports"
      - run:
          name: execute sonar-scanner to analyze PR
          command: >
            if [ ! -z "$SONAR_TOKEN" ] && \
              [ ! -z "$SORABOT_TOKEN" ] && \
              [ ! -z "$CIRCLE_BUILD_NUM" ] && \
              [ ! -z "$CI_PULL_REQUEST" ]; then
              echo "required env vars not found"
              exit 0
            else
              sonar-scanner \
                -Dsonar.github.disableInlineComments \
                -Dsonar.github.repository="hyperledger/iroha" \
                -Dsonar.analysis.mode=preview \
                -Dsonar.login=${SONAR_TOKEN} \
                -Dsonar.projectVersion="${CIRCLE_BUILD_NUM}" \
                -Dsonar.github.oauth="${SORABOT_TOKEN}" \
                -Dsonar.github.pullRequest="$(echo $CI_PULL_REQUEST | egrep -o "[0-9]+")"
            fi

      - save_cache:
          key: sonar-{{ epoch }}
          paths:
            - ~/.sonar


  # executed only for develop, master and release branches
  sonar-release:
    <<: *defaults
    docker:
      - image: hyperledger/iroha-docker-develop
    steps:
      - checkout
      - restore_cache:
          keys:
            - sonar-
      - attach_workspace:
          at: /opt/iroha/build
      - run:
          name: codecov.io
          command: bash <(curl -s https://codecov.io/bash) -f $IROHA_BUILD/reports/gcovr.xml || echo "Codecov did not collect coverage reports"
      - run:
          name: execute sonar-scanner
          command: >
            sonar-scanner \
              -Dsonar.login="${SONAR_TOKEN}" \
              -Dsonar.projectVersion="${CIRCLE_BUILD_NUM}" \
              -Dsonar.branch="${CIRCLE_BRANCH}"
      - save_cache:
          key: sonar-{{ epoch }}
          paths:
            - ~/.sonar


  macos-build:
    #docker:
    #  - image: postgres:9.5
    #  - image: redis:3.2.8
    macos:
      xcode: 9.0.0
    steps:
      - checkout
      
      - restore_cache:
          keys:
            - brew-

      - restore_cache:
          keys:
            - build-cache-{{ .Branch }}-
            - build-cache-
          paths:
            - ~/.ccache
      
      - run:
          name: install dev dependencies
          command: brew install cmake boost postgres grpc autoconf automake libtool ccache

      - save_cache:
          key: brew-{{ epoch }}
          paths:
            - $HOME/Library/Caches/Homebrew

      - run:
          name: ccache setup
          command: |
            ccache -F 0
            ccache -M 0      
      
      - run:
          name: build
          command: |
            cmake -H. -Bbuild
            cmake --build build -- -j$(sysctl -n hw.ncpu)

      - run:
          name: ccache teardown
          command: |
            ccache --cleanup
            ccache --show-stats
      
      - save_cache:
          key: build-cache-{{ .Branch }}-{{ epoch }}
          paths:
            - ~/.ccache

      - run: ccache --show-stats
     

workflows:
  version: 2
  full_pipeline:
    jobs:
      # macos-build/build -> sonar -> dockerize
      - macos-build
      - build
      - sonar-pr:
          requires:
            - build
          filters:
            branches:
              ignore:
                - develop
                - master
            tags:
              # do not invoke sonar-pr for tags
              ignore: /.*/
      # invoke sonar-release whenever anything to master, develop is pushed
      # or any commit tagged with v[\.0-9]+.*
      - sonar-release:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - master
            tags:
              only: /v[\.0-9]+.*/
